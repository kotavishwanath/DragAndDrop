//
//  FetchImagesViewController.swift
//  Drag&DropCollectionView
//
//  Created by Vishwanath Kota on 09/01/2020.
//  Copyright Â© 2020 Vishwanath Kota. All rights reserved.
//
import Photos
import UIKit

class FetchImagesViewController: UIViewController {

   var images:[UIImage] = [] // <-- Array to hold the fetched images

    @IBOutlet fileprivate var captureButton: UIButton!
      
    ///Displays a preview of the video output generated by the device's cameras.
    @IBOutlet fileprivate var capturePreviewView: UIView!
      
    ///Allows the user to put the camera in photo mode.
    @IBOutlet fileprivate var photoModeButton: UIButton!
    @IBOutlet fileprivate var toggleCameraButton: UIButton!
    @IBOutlet fileprivate var toggleFlashButton: UIButton!
      
    ///Allows the user to put the camera in video mode.
    @IBOutlet fileprivate var videoModeButton: UIButton!
      
    let cameraController = CameraController()
      
    override var prefersStatusBarHidden: Bool { return true }
    
   override func viewDidLoad() {
        let dateFormatter = DateFormatter()
        dateFormatter.dateFormat = "MM-dd-yyyy HH:mm:ss"//"yyyy'-'MM'-'dd'T'HH':'mm':'ssZZZ"
        let date = dateFormatter.date(from: "01-09-2020 10:38:00")
        print(date!)
       
       let formatter = DateFormatter()
       formatter.dateFormat = "MM-dd-yyyy HH:mm:ss"//"MM-dd-yyyy"
       fetchPhotosInRange(startDate: formatter.date(from: "01-09-2020 10:38:00")! as NSDate, endDate: formatter.date(from: "01-09-2020 12:38:00")! as NSDate)
        print(images.count)
        
        
        //Custom Camera
        func configureCameraController() {
            cameraController.prepare {(error) in
                if let error = error {
                    print(error)
                }
                
                try? self.cameraController.displayPreview(on: self.capturePreviewView)
            }
        }
        
        func styleCaptureButton() {
            captureButton.layer.borderColor = UIColor.black.cgColor
            captureButton.layer.borderWidth = 2
            
            captureButton.layer.cornerRadius = min(captureButton.frame.width, captureButton.frame.height) / 2
        }
        
        styleCaptureButton()
        configureCameraController()
    
   }
   
    
   func fetchPhotosInRange(startDate:NSDate, endDate:NSDate) {

       let imgManager = PHImageManager.default()

       let requestOptions = PHImageRequestOptions()
       requestOptions.isSynchronous = true
       requestOptions.isNetworkAccessAllowed = true

       // Fetch the images between the start and end date
       let fetchOptions = PHFetchOptions()
       fetchOptions.predicate = NSPredicate(format: "creationDate > %@ AND creationDate < %@", startDate, endDate)

       images = []

       let fetchResult: PHFetchResult = PHAsset.fetchAssets(with: PHAssetMediaType.image, options: fetchOptions)
       // If the fetch result isn't empty,
       // proceed with the image request
       if fetchResult.count > 0 {
           // Perform the image request
           for index in 0  ..< fetchResult.count  {
            let asset = fetchResult.object(at: index)
            guard let time = asset.creationDate else { return }
//           print(asset.creationDate ?? "None")
            
            //-------------Important
            
            //Fetching milli second from "time"
            let formatter = DateFormatter()
            formatter.dateFormat = "yyyy-MM-dd HH:mm:ss.SSSS"

            let myString = formatter.string(from: time) // string purpose I add here
            // convert your string to date
            let yourDate = formatter.date(from: myString)
            //then again set the date format whhich type of output you need
            formatter.dateFormat = "yyyy-MM-dd HH:mm:ss.SSSS"
            // again convert your date to string
            let myStringafd = formatter.string(from: yourDate!)
            print(myStringafd)
            
            //--------------Important
            
            imgManager.requestImageData(for: asset, options: requestOptions, resultHandler: { (imageData: Data?, dataUTI: String?, orientation: UIImage.Orientation, info: [AnyHashable : Any]?) -> Void in
                   if let imageData = imageData {
                       if let image = UIImage(data: imageData) {
                           // Add the returned image to your array
                           self.images += [image]
                       }
                   }
                   if self.images.count == fetchResult.count {
                       // Do something once all the images
                       // have been fetched. (This if statement
                       // executes as long as all the images
                       // are found; but you should also handle
                       // the case where they're not all found.)
                       print(self.images)
                   }
               })
           }
       }
   }
}

extension NSDate {
    convenience
    init(dateString:String) {
        let dateStringFormatter = DateFormatter()
        dateStringFormatter.dateFormat = "MM-dd-yyyy "
        dateStringFormatter.locale = NSLocale(localeIdentifier: "en_US_POSIX") as Locale
        let d = dateStringFormatter.date(from: dateString)!
        self.init(timeInterval:0, since:d)
    }
}


extension FetchImagesViewController {
    @IBAction func toggleFlash(_ sender: Any) {
        if cameraController.flashMode == .on {
            cameraController.flashMode = .off
            toggleFlashButton.setImage(#imageLiteral(resourceName: "Flash Off Icon"), for: .normal)
        }
            
        else {
            cameraController.flashMode = .on
            toggleFlashButton.setImage(#imageLiteral(resourceName: "Flash On Icon"), for: .normal)
        }
    }
    
     @IBAction func switchCameras(_ sender: Any) {
        do {
            try cameraController.switchCameras()
        }
            
        catch {
            print(error)
        }
        
        switch cameraController.currentCameraPosition {
        case .some(.front):
            toggleCameraButton.setImage(#imageLiteral(resourceName: "Front Camera Icon"), for: .normal)
            
        case .some(.rear):
            toggleCameraButton.setImage(#imageLiteral(resourceName: "Rear Camera Icon"), for: .normal)
            
        case .none:
            return
        }
    }
    
    @IBAction func clickImage(_ sender: Any) {
        cameraController.captureImage {(image, error) in
            guard let image = image else {
                print(error ?? "Image capture error")
                return
            }
            
            try? PHPhotoLibrary.shared().performChangesAndWait {
                PHAssetChangeRequest.creationRequestForAsset(from: image)
            }
        }
    }
}

